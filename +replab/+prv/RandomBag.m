% Generator of random elements from generators of a group.
% 
% A random bag is a set of random group elements that always generates
% the group; random elements are provided by multiplying elements of the
% bag and returning one element of the product which is removed from the bag.
% 
% Straight-forward implementation of PRINITIALIZE and PRRANDOM of 
% section 3.2.2, pp. 70-71 of Holt 2005 (Handbook of Computational Group Theory)
classdef RandomBag < handle
    
    properties
        x0 % Last generated sample
        x % 1 x r cell array representing the contents of the bag
        identity % identity group element
        composeFun % binary function to compose two group elements
        inverseFun % function to compute group element inverse
    end

    methods
        
        function res = sample(self)
            r = length(self.x);
            s = randi(r);
            t = randi(r);
            while t == s
                t = randi(r);
            end
            if randi(2) == 2
                if randi(2) == 2 % e = 1
                    self.x{s} = self.composeFun(self.x{s}, self.x{t});
                else
                    tinv = self.inverseFun(self.x{t});
                    self.x{s} = self.composeFun(self.x{s}, tinv);
                end
                self.x0 = self.composeFun(self.x0, self.x{s});
            else
                if randi(2) == 2 % e = 1
                    self.x{s} = self.composeFun(self.x{t}, self.x{s});
                else
                    tinv = self.inverseFun(self.x{t});
                    self.x{s} = self.composeFun(tinv, self.x{s});
                end
                self.x0 = self.composeFun(self.x{s}, self.x0);
            end
            res = self.x0;
        end
        
        function self = RandomBag(generators, identity, composeFun, inverseFun, r, n)
        % Constructs a random bag from the given generators, given
        % as a 1 x k cell array of group elements, where k >= 0.
        %
        % identity, composeF and inverseF must define a group (see properties)
        %
        % r is the number of elements in the bag (optional, default: max(k, 10))
        % n is the number of shuffles done during initialization (optional, default: 50)
            if nargin < 6
                r = -1;
            end
            if nargin < 5
                n = 50;
            end
            k = length(generators); % number of generators
            assert(k >= 1);
            x = cell(1, r);
            if r < k || r < 10
                r = max(k, 10);
            end
            g = 1;
            for i = 1:r
                x{i} = generators{g};
                g = g + 1;
                if g > k
                    g = 1;
                end
            end
            self.identity = identity;
            self.composeFun = composeFun;
            self.inverseFun = inverseFun;
            self.x0 = identity; % initially, the identity element
            self.x = x;
            for i = 1:n
                self.sample; % perform initial shuffles
            end
        end
   
    end
    
    methods (Static)
        
        function R = fromPermutations(permutations, r, n)
        % Returns a RandomBag that generates random permutations from the
        % group generated by the permutations present as row vectors in
        % "permutations", which is a k x m matrix, where k is the number
        % of generators, and m is the domain size, with k >= 0, but m > 0.
        % For the description of the optional parameters r and n, 
        % see the main constructor RandomBag.
            k = size(permutations, 1);
            m = size(permutations, 2);
            composeFun = @(x, y) replab.Perm.compose(x, y);
            inverseFun = @(x) replab.Perm.inverse(x);
            identity = 1:m;
            generators = cell(1, k);
            for i = 1:k
                generators{i} = permutations(i, :);
            end
            switch nargin
              case 1
                R = replab.prv.RandomBag(generators, identity, composeFun, inverseFun);
              case 2
                R = replab.prv.RandomBag(generators, identity, composeFun, inverseFun, r);
              case 3
                R = replab.prv.RandomBag(generators, identity, composeFun, inverseFun, r, n);
            end
        end
        
    end
    
end
