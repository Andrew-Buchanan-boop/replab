function tests = enforceQuaternionEncodingTest()
    disp(['Setting up tests in ', mfilename()]);
    tests = functiontests(localfunctions);
end

function testHasCorrectForm(param)
    Q = replab.signed.Permutations.quaternionGroup;
    S3 = replab.S(3);
    W = S3.wreathProduct(Q);
    rep = W.primitiveRep(Q.naturalRep);
    basis = [0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 1 0 0 0 0 0 0 0 0 0 -1 0 1 1 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 -1
             0 0 -1 0 0 0 0 0 0 -1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0
             0 0 0 0 0 0 1 1 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 0 0 0 0 0 -1 1 0 -1 0
             0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 -1 0 0 0 0 0 0 -1 -1 0 0 0 0 0 -1 -1 0 0 1 0 -1 0 0 0 0 0 0 0
             0 0 0 0 1 0 0 0 -1 0 0 0 -1 0 0 0 0 0 -1 -1 0 0 1 0 1 0 0 0 0 0 0 0
             0 0 0 -1 0 -1 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0
             -1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 -1 -1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 -1 -1 0 0 0 1 0 0 0 -1 0 0
             0 0 0 -1 0 1 0 0 0 0 0 0 0 0 0 1 -1 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 1
             0 0 0 0 0 0 0 0 -1 0 0 -1 1 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0
             0 -1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0
             1 0 0 0 0 0 1 -1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 -1 -1 0 -1 0
             0 1 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 -1 1 0 0 0 1 0 0 0 -1 0 0
             1 0 0 0 0 0 1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0
             0 0 0 -1 0 -1 0 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 -1
             0 0 0 0 1 0 0 0 -1 0 0 0 -1 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0
             -1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 -1 0 0 0 0 0 0 0 0 0 -1 -1 0 1 0
             0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 -1 1 0 0 0 1 0 0 0 1 0 0
             0 0 0 0 0 0 0 0 -1 0 0 -1 1 0 0 0 0 0 1 -1 0 0 1 0 -1 0 0 0 0 0 0 0
             0 0 0 -1 0 1 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 1 0 0 0 1 0 0 -1 0 0 0 0 0 0 -1 1 0 0 1 0 1 0 0 0 0 0 0 0
             0 1 -1 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0
             3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 -1 0 0 0 0 0 0 0 1 0 1 -1 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 1
             -1 0 0 0 0 0 0 -1 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 0 0 0 0 0 -1 -1 0 -1 0
             0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 1 0 0 1 -1 0 0 0 0 0 1 1 0 0 1 0 -1 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 1 1 0 0 0 0 0 0 -1 0 0 -1 0 0 0 0 0 0 0 0 0 1 -1 0 -1 0
             0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 -1 0 -1 0 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 0 0 1 0 0 -1 0 0 0 0 1
             0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             -1 0 0 0 0 0 0 -1 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0
             1 0 0 0 0 0 1 -1 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 -1 1 0 1 0
             0 0 1 0 0 0 0 0 0 1 -1 0 0 0 0 0 0 0 0 0 -1 1 0 0 0 -1 0 0 0 1 0 0
             0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 -1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 -1
             0 1 -1 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 -1 -1 0 0 0 -1 0 0 0 1 0 0
             0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 1 0 0 0 0 0 0 0 0 0 -1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2
             0 0 0 0 -1 0 0 0 -1 0 0 1 0 0 0 0 0 0 -1 1 0 0 1 0 -1 0 0 0 0 0 0 0
             0 0 0 0 0 -1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0
             0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 -1 -1 0 0 -1 0 -1 0 0 0 0 0 0 0
             0 0 -1 0 0 0 0 0 0 -1 1 0 0 0 0 0 0 0 0 0 -1 1 0 0 0 -1 0 0 0 -1 0 0
             -1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 -1 0 0 0 0 0 0 0 0 0 1 1 0 -1 0
             0 0 0 0 -1 0 0 0 -1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0
             0 0 0 1 0 0 0 0 0 0 0 0 0 -1 0 1 -1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 -1
             0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 -1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 -1 -1 0 0 0 1 0 0 0 1 0 0
             0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             -1 0 0 0 0 0 0 -1 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 0 0 0 0 0 1 -1 0 1 0
             0 0 0 -1 0 1 0 0 0 0 0 0 0 0 0 1 -1 0 0 0 0 0 0 1 0 0 -1 0 0 0 0 -1
             0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 0 1 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0
             0 -1 -1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 -1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 -1 0 0 1 0 1 0 0 0 0 0 0 0
             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
    sub = rep.subRep(basis);
    sub.isIrreducible = true;
    sub.frobeniusSchurIndicator = -1;
    ctx = replab.Context.make;
    res = replab.irreducible.enforceQuaternionEncoding(sub, ctx);
    ctx.close;
    assert(res.parent == sub);
    X = res.sample;
    X1 = replab.domain.QuaternionTypeMatrices(32, 32).project(X);
    assert(norm(X - X1) < replab.Parameters.doubleEigTol);
end
