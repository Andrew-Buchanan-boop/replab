# We pretend to be Java because we need GNU Octave which is not 
# available (as of January 2016)
language: java

###############################################################################
cache:
  # Downloading octave takes a while, so let's cache apt
  apt: true
  directories:
    # Cache octave packages
    - $HOME/octave
    # Cache other packages
    - $HOME/external_cache

###############################################################################
# Command to install dependencies
before_install:
  # Remember the directory where our repository to test is located
  - REPOPATH="$(pwd)" && pwd
  # ---------------------------------------------------------------------------
  # Check whether we need to upgrade the gcc and g++ versions. We do need to if
  # the version is less the 4.8 and we need to install the image package from
  # Octave Forge (possibly for other packages as well).
  # For now, lets just always say we do need to do this.
  #- UPGRADE_GCC="true"
  # ---------------------------------------------------------------------------
  # Add repository for octave
  - travis_retry sudo add-apt-repository -y ppa:octave/stable
  # Add repository for installing g++-4.8 on Ubuntu 12.04
  #- if [ "$UPGRADE_GCC" = "true" ]; then
  #    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
  #  fi
  # Update apt-get to include the contents from the new locations
  - travis_retry sudo apt-get update -qq
  # Install octave with apt-get
  - travis_retry sudo apt-get install -y octave
  - git submodule update --init
  # - cd ${REPOPATH}   not needed for now

###############################################################################
install:
  echo "addpath(pwd);";

###############################################################################
before_script:
  - TEST_ARGS="'-recursive', '-verbose', '-junit_xml_file', 'testresults.xml'";
    TEST_COMMAND="exit(~moxunit_runtests('tests', $TEST_ARGS));";
    echo "TEST_COMMAND| $TEST_COMMAND";
  # Double-check we are still in the right directory
  - pwd
  # Check what octave packages we have installed
  - octave -q --eval "ver"
  # ---------------------------------------------------------------------------
  # Remove any cached results files from previous build, if present
  - rm -f testresults.xml;
  # ---------------------------------------------------------------------------

###############################################################################
script:
  - octave -q --eval "$ADDPATH_COMMAND $TEST_COMMAND";

###############################################################################
after_script:
  # Check where we ended up and what's going on where we are
  - pwd
  - ls -alh
